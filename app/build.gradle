plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}
apply plugin: 'AndResGuard'
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            "R.string.project_id",
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.21'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}
//定义config变量
def config = rootProject.ext
android {
    signingConfigs {
        release {
            keyAlias 'key0'
            keyPassword '123456'
            storeFile file('lifei.jks')
            storePassword '123456'
        }
    }
    //导入的方式导入
    compileSdkVersion config.android.compileSdkVersion
    buildToolsVersion config.android.buildToolsVersion

    defaultConfig {
        applicationId config.android.applicationId
        minSdkVersion config.android.minSdkVersion
        targetSdkVersion config.android.targetSdkVersion
        versionCode config.android.versionCode
        versionName config.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        resConfigs 'zh','en'
        splits {
            abi {
                //开启分包，默认会生成每个架构的apk包
                enable true
                //清除默认架构列表
                reset()
                //生成指定架构的apk包
                include 'armeabi-v7a','arm64-v8a'
                //生成包含所以架构的apk包
                universalApk true
            }
        }
    }

    sourceSets {
        main {
            //jni库统一放在libs目录下
//            jniLibs.srcDir = ['libs']
            if (isBuildModule.toBoolean()) {
                //单独运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主中
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时.剔除debug文件夹下的所有调式文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    //开启databinding
    buildFeatures {
        dataBinding true
        viewBinding true
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
//    lintOptions {
//        checkReleaseBuilds false
//        abortOnError false
//    }
}

dependencies {

    //3. 依赖包的引入方式，在关键字后面加上 config.dependencies，最后用括号包裹定义的变量名。
    testImplementation config.androidx["junit"]
    androidTestImplementation config.androidx["androidx.test.ext-junit"]
    androidTestImplementation config.androidx["androidx.test.espresso:espresso-core"]
    //阿里云路由框架
    kapt config.dependencies["arouter-compiler"]
    //glide图片加载框架
    kapt config.dependencies["glide-compiler"]

    //宿主项目中判断组件是否独立运行
    if (isBuildModule.toBoolean()) {
        //独立运行时不要其他module,直接依赖基础库
        implementation project(path: ':library-base')

        implementation config.androidx["kotlin-stdlib"]
        implementation config.androidx["androidx.core"]
    } else {
        //非独立运行时依赖其他业务模块
        //主业务模块
        implementation project(path: ':module-main')
        //首页模块
        implementation project(path: ':module-home')
        //社区模块
        implementation project(path: ':module-community')
        //更多模块
        implementation project(path: ':module-more')
        //视频播放器模块
        implementation project(path: ':module-player')
        //用户模块
        implementation project(path: ':module-user')
    }


}